% function to calculate cost for linear regression

function J = computeCost(X, y, theta)
%COMPUTECOST Compute cost for linear regression
%   J = COMPUTECOST(X, y, theta) computes the cost of using theta as the
%   parameter for linear regression to fit the data points in X and y

% Initialize some useful values

cost = 0;
m = length(y);
i = 1;
while i <= m
    cost = cost + (theta(1,1)+(theta(2,1)*X(i,2)) - y(i,1))^2;
    i = i+1;
end
J = cost/(2*m);

end

% Gradient descent function

function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters
    
    t1 = theta(1) - alpha * (1 / m) * sum(((X * theta) - y) .* X(:, 1));
    t2 = theta(2) - alpha * (1 / m) * sum(((X * theta) - y) .* X(:, 2));
 
    theta(1) = t1;
    theta(2) = t2;

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
